/*
 * This file is generated by jOOQ.
 */
package db.tables.daos;


import db.tables.Organisation;
import db.tables.records.OrganisationRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganisationDao extends DAOImpl<OrganisationRecord, db.tables.pojos.Organisation, Integer> {

    /**
     * Create a new OrganisationDao without any configuration
     */
    public OrganisationDao() {
        super(Organisation.ORGANISATION, db.tables.pojos.Organisation.class);
    }

    /**
     * Create a new OrganisationDao with an attached configuration
     */
    public OrganisationDao(Configuration configuration) {
        super(Organisation.ORGANISATION, db.tables.pojos.Organisation.class, configuration);
    }

    @Override
    public Integer getId(db.tables.pojos.Organisation object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Organisation> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Organisation.ORGANISATION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<db.tables.pojos.Organisation> fetchById(Integer... values) {
        return fetch(Organisation.ORGANISATION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public db.tables.pojos.Organisation fetchOneById(Integer value) {
        return fetchOne(Organisation.ORGANISATION.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Organisation> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Organisation.ORGANISATION.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<db.tables.pojos.Organisation> fetchByName(String... values) {
        return fetch(Organisation.ORGANISATION.NAME, values);
    }

    /**
     * Fetch records that have <code>tax BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Organisation> fetchRangeOfTax(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Organisation.ORGANISATION.TAX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tax IN (values)</code>
     */
    public List<db.tables.pojos.Organisation> fetchByTax(Integer... values) {
        return fetch(Organisation.ORGANISATION.TAX, values);
    }

    /**
     * Fetch records that have <code>checkingAcc BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Organisation> fetchRangeOfCheckingacc(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Organisation.ORGANISATION.CHECKINGACC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>checkingAcc IN (values)</code>
     */
    public List<db.tables.pojos.Organisation> fetchByCheckingacc(Integer... values) {
        return fetch(Organisation.ORGANISATION.CHECKINGACC, values);
    }
}
