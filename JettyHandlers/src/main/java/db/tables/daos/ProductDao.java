/*
 * This file is generated by jOOQ.
 */
package db.tables.daos;


import db.tables.Product;
import db.tables.records.ProductRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import javax.annotation.processing.Generated;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductDao extends DAOImpl<ProductRecord, db.tables.pojos.Product, Integer> {

    /**
     * Create a new ProductDao without any configuration
     */
    public ProductDao() {
        super(Product.PRODUCT, db.tables.pojos.Product.class);
    }

    /**
     * Create a new ProductDao with an attached configuration
     */
    public ProductDao(Configuration configuration) {
        super(Product.PRODUCT, db.tables.pojos.Product.class, configuration);
    }

    @Override
    public Integer getId(db.tables.pojos.Product object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Product> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Product.PRODUCT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<db.tables.pojos.Product> fetchById(Integer... values) {
        return fetch(Product.PRODUCT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public db.tables.pojos.Product fetchOneById(Integer value) {
        return fetchOne(Product.PRODUCT.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Product> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<db.tables.pojos.Product> fetchByName(String... values) {
        return fetch(Product.PRODUCT.NAME, values);
    }

    /**
     * Fetch records that have <code>producer BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Product> fetchRangeOfProducer(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.PRODUCER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>producer IN (values)</code>
     */
    public List<db.tables.pojos.Product> fetchByProducer(String... values) {
        return fetch(Product.PRODUCT.PRODUCER, values);
    }

    /**
     * Fetch records that have <code>quantity BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Product> fetchRangeOfQuantity(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Product.PRODUCT.QUANTITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>quantity IN (values)</code>
     */
    public List<db.tables.pojos.Product> fetchByQuantity(Integer... values) {
        return fetch(Product.PRODUCT.QUANTITY, values);
    }
}
